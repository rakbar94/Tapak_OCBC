import java.util.*;

public class tapak_ocbc {

    public static long getDemolitionScore(int[] arr, int k) {
        Map<String, Long> memo = new HashMap<>();
        long res = dfs(arr, k, memo);
        return Math.max(0L, res); // jika semua jalur invalid, kembalikan 0
    }

    private static long dfs(int[] arr, int movesLeft, Map<String, Long> memo) {
        if (movesLeft == 0) return 0L;
        if (arr.length == 0) return Long.MIN_VALUE; // cabang tidak valid

        String key = Arrays.toString(arr) + "|" + movesLeft;
        if (memo.containsKey(key)) return memo.get(key);

        long best = Long.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            int val = arr[i];

            // Partition
            int[] left = Arrays.copyOfRange(arr, 0, i);
            int[] right = Arrays.copyOfRange(arr, i + 1, arr.length);

            int[] survivor;
            if (left.length > right.length) {
                survivor = left;
            } else if (right.length > left.length) {
                survivor = right;
            } else {
                survivor = right; // jika sama panjang, buang left
            }

            // Weaken survivor
            int[] weakened = new int[survivor.length];
            for (int j = 0; j < survivor.length; j++) {
                weakened[j] = Math.max(0, survivor[j] - val);
            }

            long sub = dfs(weakened, movesLeft - 1, memo);
            if (sub == Long.MIN_VALUE) {
                // jalur tidak valid â€” lewati
                continue;
            }
            long candidate = val + sub;
            best = Math.max(best, candidate);
        }

        memo.put(key, best);
        return best;
    }

    // Contoh uji
    public static void main(String[] args) {
        int[] arr = {10, 2, 8, 5};
        int k = 2;
        System.out.println(getDemolitionScore(arr, k)); // Expected: 10
    }
}
